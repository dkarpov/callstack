{"version":3,"sources":["components/List.jsx","components/reducer.js","components/SimpleChart.jsx","components/App.js","components/actions.js","serviceWorker.js","index.js"],"names":["List","React","memo","_ref","list","onSelect","selection","react_default","a","createElement","className","map","_ref2","appID","key","concat","onClick","prevProps","nextProps","reducer","state","action","data","type","Object","objectSpread","isLoading","appIDList","currentAppID","currentAppData","appsData","aggregatedAppsData","rawData","field","reducedApps","Array","isArray","reduce","accum","item","push","keys","name","avgSendingRate","parseFloat","length","SimpleBarChart","dataKey","es6","width","height","formatter","renderCustomLegendText","fill","SimpleLineChart","stroke","strokeWidth","customLabel","value","entry","color","style","initialState","App","_useReducer","useReducer","_useReducer2","slicedToArray","dispatch","useEffect","fetch","then","response","json","initLoadAction","id","toString","getAppIDInfoAction","SimpleChart_SimpleBarChart","filter","meanSendingRateKbps","SimpleChart_SimpleLineChart","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0f1c43be.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles/App.css\";\r\n\r\nexport const List = React.memo(\r\n  ({ list, onSelect, selection }) => (\r\n    <div className=\"list\">\r\n      <span>Currently slected appID - {selection ? selection : \"none\"}</span>\r\n\r\n      {list &&\r\n        list.map(({ appID }) => (\r\n          <div\r\n            key={appID}\r\n            className={`list-item ${selection === appID && \"active-item\"}`}\r\n            onClick={() => onSelect(appID)}\r\n          >\r\n            {appID}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  ),\r\n  (prevProps, nextProps) =>\r\n    prevProps.list === nextProps.list &&\r\n    prevProps.selection === nextProps.selection\r\n);\r\n","export default function reducer(state, action) {\r\n  const { data, type } = action;\r\n\r\n  switch (type) {\r\n    case \"LIST_LOAD\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        appIDList: []\r\n      };\r\n    case \"LIST_LOADED\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        appIDList: data\r\n      };\r\n    case \"LOAD_APPID_INFO\":\r\n      return {\r\n        ...state,\r\n        isLoading: true,\r\n        currentAppID: data,\r\n        currentAppData: null\r\n      };\r\n    case \"APPID_INFO_LOADED\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        currentAppData: data\r\n      };\r\n    case \"APPS_INFO_LOADED\":\r\n      return {\r\n        ...state,\r\n        isLoading: false,\r\n        appsData: aggregatedAppsData(data, \"meanSendingRateKbps\")\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst aggregatedAppsData = (rawData, field) => {\r\n  const reducedApps =\r\n    Array.isArray(rawData) &&\r\n    rawData.reduce((accum, item) => {\r\n      if (accum[item.appID]) {\r\n        accum[item.appID][field].push(item[field]);\r\n      } else {\r\n        accum[item.appID] = {};\r\n        accum[item.appID][field] = [];\r\n      }\r\n\r\n      return accum;\r\n    }, {});\r\n\r\n  const withAvgSendingRate = Object.keys(reducedApps)\r\n    .map(item => ({\r\n      ...reducedApps[item],\r\n      name: \"appID \" + item\r\n    }))\r\n    .map(item => ({\r\n      ...item,\r\n      avgSendingRate:\r\n        item[field].reduce(\r\n          (accum, item) => parseFloat(accum) + parseFloat(item)\r\n        ) / item[field].length\r\n    }));\r\n\r\n  return withAvgSendingRate;\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  YAxis,\r\n  XAxis,\r\n  Tooltip,\r\n  Legend,\r\n  LineChart,\r\n  Line\r\n} from \"recharts\";\r\n\r\nexport const SimpleBarChart = ({ data, dataKey }) =>\r\n  data ? (\r\n    <BarChart width={800} height={600} data={data}>\r\n      <YAxis />\r\n      <XAxis />\r\n      <Tooltip />\r\n      <Legend\r\n        formatter={renderCustomLegendText(\r\n          \"Distribution of sending rate within selected appID\"\r\n        )}\r\n      />\r\n      <Bar dataKey={dataKey} fill=\"#9acd32\" />\r\n    </BarChart>\r\n  ) : (\r\n    <span>Preparing chart data......</span>\r\n  );\r\n\r\nexport const SimpleLineChart = ({ data, dataKey }) =>\r\n  data ? (\r\n    <LineChart width={800} height={400} data={data}>\r\n      <XAxis dataKey=\"name\" />\r\n      <YAxis />\r\n      <Tooltip />\r\n      <Legend\r\n        formatter={renderCustomLegendText(\r\n          \"Distribution of average application sending rate across all appIDs\"\r\n        )}\r\n      />\r\n      <Line\r\n        type=\"monotone\"\r\n        //dot={false}\r\n        dataKey={dataKey}\r\n        stroke=\"#4363d8\"\r\n        strokeWidth={3}\r\n      />\r\n    </LineChart>\r\n  ) : (\r\n    <span>Preparing chart data...</span>\r\n  );\r\n\r\nconst renderCustomLegendText = customLabel => (value, entry) => {\r\n  const { color } = entry;\r\n  return <span style={{ color }}>{customLabel}</span>;\r\n};\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport \"../styles/App.css\";\r\nimport { List } from \"./List\";\r\nimport { initLoadAction, getAppIDInfoAction } from \"./actions\";\r\nimport reducer from \"./reducer\";\r\nimport { SimpleBarChart, SimpleLineChart } from \"./SimpleChart\";\r\n\r\nconst initialState = {\r\n  isLoading: false,\r\n  appIDList: [],\r\n  currentAppID: null,\r\n  currentAppData: null,\r\n  appsData: null\r\n};\r\n\r\nexport const App = () => {\r\n  const [state, dispatch] = useReducer(reducer, initialState);\r\n  const getAppInfo = appID => getAppIDInfoAction(dispatch, appID);\r\n\r\n  useEffect(() => {\r\n    initLoadAction(dispatch);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <List\r\n        list={state.appIDList}\r\n        onSelect={getAppInfo}\r\n        selection={state.currentAppID}\r\n      />\r\n\r\n      <div className=\"chartHolder\">\r\n        <SimpleBarChart\r\n          data={\r\n            state.currentAppData &&\r\n            state.currentAppData.filter(item => item.meanSendingRateKbps.length)\r\n          }\r\n          dataKey=\"meanSendingRateKbps\"\r\n        />\r\n        <SimpleLineChart data={state.appsData} dataKey=\"avgSendingRate\" />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","export const initLoadAction = dispatch => {\r\n  dispatch({ type: \"LIST_LOAD\" });\r\n\r\n  fetch(\"https://fathomless-island-89335.herokuapp.com/app\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: \"LIST_LOADED\", data }));\r\n\r\n  fetch(\"https://fathomless-island-89335.herokuapp.com/rates\")\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: \"APPS_INFO_LOADED\", data }));\r\n};\r\n\r\nexport const getAppIDInfoAction = (dispatch, id) => {\r\n  dispatch({ type: \"LOAD_APPID_INFO\", data: id.toString() });\r\n\r\n  fetch(`https://fathomless-island-89335.herokuapp.com/app/${id}`)\r\n    .then(response => response.json())\r\n    .then(data => dispatch({ type: \"APPID_INFO_LOADED\", data }));\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./styles/index.css\";\r\nimport App from \"./components/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}